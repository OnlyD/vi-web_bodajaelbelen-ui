AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Boda Belen y Jael - Wedding Website Infrastructure

Parameters:
  DomainName:
    Type: String
    Default: boda-belen-y-jael.com
    Description: Custom domain name for the wedding website

  HostedZoneId:
    Type: String
    Default: Z07924502NKKCJL9T6ZHH
    Description: Route 53 Hosted Zone ID for the domain

  GitHubOrg:
    Type: String
    Description: GitHub organization or username
    Default: OnlyD

  GitHubRepo:
    Type: String
    Description: GitHub repository name
    Default: vi-web_bodajaelbelen-ui

Resources:
  # SSL Certificate for custom domain (must be in us-east-1 for CloudFront)
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub www.${DomainName}
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
        - DomainName: !Sub www.${DomainName}
          HostedZoneId: !Ref HostedZoneId
      Tags:
        - Key: Project
          Value: BodaBelenJael
        - Key: Environment
          Value: prod
        - Key: Component
          Value: frontend
        - Key: Repository
          Value: vi-web_bodajaelbelen-ui
        - Key: Owner
          Value: OnlyD
        - Key: CostCenter
          Value: bodabelenjael-ops
        - Key: Service
          Value: acm

  # Lambda@Edge function for token validation
  AuthLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BodaBelen-AuthFunction
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt AuthLambdaRole.Arn
      Code:
        ZipFile: |
          'use strict';
          exports.handler = (event, context, callback) => {
              const request = event.Records[0].cf.request;
              const uri = request.uri;
              
              // Define the permanent token (you can change this) - Updated v2
              const VALID_TOKEN = 'love4ever';
              
              // Parse query string to get token parameter
              const querystring = request.querystring;
              const urlParams = new URLSearchParams(querystring);
              const providedToken = urlParams.get('token');
              
              // Check if accessing the access-denied page (allow it)
              if (uri === '/access-denied.html') {
                  callback(null, request);
                  return;
              }
              
              // Check if token is valid
              if (providedToken === VALID_TOKEN) {
                  // Token is valid, allow request to continue
                  callback(null, request);
                  return;
              }
              
              // Invalid or missing token - redirect to access denied page
              const response = {
                  status: '302',
                  statusDescription: 'Found',
                  headers: {
                      location: [{
                          key: 'Location',
                          value: '/access-denied.html'
                      }],
                      'cache-control': [{
                          key: 'Cache-Control',
                          value: "max-age=0"
                      }]
                  }
              };
              
              callback(null, response);
          };
      Tags:
        - Key: Project
          Value: BodaBelenJael
        - Key: Environment
          Value: prod
        - Key: Component
          Value: auth
        - Key: Repository
          Value: vi-web_bodajaelbelen-ui
        - Key: Owner
          Value: OnlyD
        - Key: Service
          Value: lambda

  # Lambda@Edge Role
  AuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Project
          Value: BodaBelenJael
        - Key: Environment
          Value: prod
        - Key: Component
          Value: auth
        - Key: Repository
          Value: vi-web_bodajaelbelen-ui
        - Key: Owner
          Value: OnlyD
        - Key: Service
          Value: iam

  # Lambda@Edge Version (required for CloudFront)
  AuthLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref AuthLambdaFunction
      CodeSha256: !GetAtt AuthLambdaFunction.CodeSha256

  # S3 Bucket for website hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: bodabelenjael-wedding-website
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Project
          Value: BodaBelenJael
        - Key: Environment
          Value: prod
        - Key: Component
          Value: frontend
        - Key: Repository
          Value: vi-web_bodajaelbelen-ui
        - Key: Owner
          Value: OnlyD
        - Key: CostCenter
          Value: bodabelenjael-ops
        - Key: Service
          Value: s3

  # Bucket policy to allow public read
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub ${WebsiteBucket.Arn}/*

  # CloudFront Distribution with custom domain
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
          - !Sub www.${DomainName}
        Origins:
          - DomainName: !Select [2, !Split ["/", !GetAtt WebsiteBucket.WebsiteURL]]
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
              OriginReadTimeout: 30
              OriginKeepaliveTimeout: 5
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # CachingOptimized
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac  # AllViewerExceptHostHeader
          ResponseHeadersPolicyId: 60669652-455b-4ae9-85a4-c4c02393f86c  # SimpleCORS
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !Ref AuthLambdaVersion
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 0
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 0
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true
      Tags:
        - Key: Project
          Value: BodaBelenJael
        - Key: Environment
          Value: prod
        - Key: Component
          Value: frontend
        - Key: Repository
          Value: vi-web_bodajaelbelen-ui
        - Key: Owner
          Value: OnlyD
        - Key: CostCenter
          Value: bodabelenjael-ops
        - Key: Service
          Value: cloudfront

  # DNS Records to point domain to CloudFront
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID (fixed for all regions)
        EvaluateTargetHealth: false

  # WWW subdomain record
  WWWDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub www.${DomainName}
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID (fixed for all regions)
        EvaluateTargetHealth: false

Outputs:
  WebsiteBucketName:
    Description: Name of the S3 bucket
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub "${AWS::StackName}-WebsiteBucket"

  WebsiteURL:
    Description: S3 Website Endpoint
    Value: !GetAtt WebsiteBucket.WebsiteURL
    Export:
      Name: !Sub "${AWS::StackName}-WebsiteURL"

  CloudFrontDistributionId:
    Description: ID of the CloudFront distribution
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontId"

  CloudFrontDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontDomainName"

  SSLCertificateArn:
    Description: ARN of the SSL certificate
    Value: !Ref SSLCertificate
    Export:
      Name: !Sub "${AWS::StackName}-SSLCertificateArn"

  CustomDomainURL:
    Description: Custom domain URL for the wedding website
    Value: !Sub https://${DomainName}
    Export:
      Name: !Sub "${AWS::StackName}-CustomDomainURL"

  WWWDomainURL:
    Description: WWW domain URL for the wedding website
    Value: !Sub https://www.${DomainName}
    Export:
      Name: !Sub "${AWS::StackName}-WWWDomainURL"
